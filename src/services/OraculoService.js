const { preverSurebets } = require("../core/BetEsporteAPI");

class OraculoService {
  constructor() {
    this.ativo = false;
    this.intervalId = null;
    this.visoesEncontradas = new Set();
    this.contadorConsultas = 0;
    this.whatsappClient = null;
    this.usuariosVIP = [];
  }

  setWhatsAppClient(client) {
    this.whatsappClient = client;
  }

  setUsuariosVIP(usuarios) {
    this.usuariosVIP = usuarios;
  }

  async iniciar() {
    if (this.ativo) {
      console.log("üîÆ Or√°culo j√° est√° ativo");
      return;
    }

    this.ativo = true;
    this.visoesEncontradas.clear();
    this.contadorConsultas = 0;

    console.log("üîÆ‚ú® OR√ÅCULO DAS SUREBETS INICIADO ‚ú®üîÆ");
    console.log("‚ïê".repeat(50));
    console.log("üåü Iniciando consulta √† bola de cristal...");
    console.log("‚ö° Delay: 10s entre jogos, 60s entre ciclos");
    console.log('üéØ Buscando energias locked nos mercados "Total"');
    console.log("üíé (Mais de 1.5, 2.5, 3.5 com locked: true)");
    console.log("‚ïê".repeat(50));

    // Primeira consulta imediata
    await this.consultarOraculo();

    // Configurar intervalo de 60 segundos
    this.intervalId = setInterval(() => {
      this.consultarOraculo();
    }, 60000);
  }

  async parar() {
    if (!this.ativo) {
      console.log("üîÆ Or√°culo j√° est√° parado");
      return;
    }

    this.ativo = false;
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }

    console.log("\nüåü Encerrando consulta ao or√°culo...");
    console.log("‚ïî" + "‚ïê".repeat(50) + "‚ïó");
    console.log(
      `‚ïë üìä Total de consultas realizadas: ${this.contadorConsultas
        .toString()
        .padStart(12)} ‚ïë`
    );
    console.log(
      `‚ïë üéØ Total de vis√µes √∫nicas: ${this.visoesEncontradas.size
        .toString()
        .padStart(18)} ‚ïë`
    );
    console.log("‚ïö" + "‚ïê".repeat(50) + "‚ïù");
    console.log("üîÆ‚ú® A bola de cristal descansa... At√© a pr√≥xima! ‚ú®üîÆ");
  }

  async consultarOraculo() {
    this.contadorConsultas++;
    const agora = new Date();
    const timestamp = agora.toLocaleString("pt-BR");

    console.log(
      `\nüîÆ [${timestamp}] CONSULTA M√çSTICA #${this.contadorConsultas}`
    );
    console.log("‚ïî" + "‚ïê".repeat(58) + "‚ïó");
    console.log(
      "‚ïë" + " ".repeat(20) + "üåü VIDENTE EM A√á√ÉO üåü" + " ".repeat(17) + "‚ïë"
    );
    console.log("‚ïö" + "‚ïê".repeat(58) + "‚ïù");

    try {
      const surebets = await preverSurebets();

      if (surebets.length > 0) {
        console.log(
          `\n‚ú® A BOLA DE CRISTAL REVELA ${surebets.length} VIS√ÉO(√ïES) PROF√âTICA(S)! ‚ú®`
        );

        for (const surebet of surebets) {
          const jogoId = `${surebet.homeTeam}_vs_${surebet.awayTeam}_${surebet.data}`;

          if (!this.visoesEncontradas.has(jogoId)) {
            this.visoesEncontradas.add(jogoId);

            console.log("\nüîÆ‚ö° NOVA PROFECIA REVELADA! ‚ö°üåü");
            console.log("‚îå" + "‚îÄ".repeat(60) + "‚îê");
            console.log(
              `‚îÇ üîÆ Vis√£o: ${surebet.homeTeam} vs ${surebet.awayTeam}`
            );
            console.log(
              `‚îÇ üèüÔ∏è  Reino: ${surebet.tournament} (${surebet.country})`
            );
            console.log(
              `‚îÇ ‚è∞ Momento Prof√©tico: ${new Date(surebet.data).toLocaleString(
                "pt-BR"
              )}`
            );
            console.log(`‚îÇ üåü Energias Locked Detectadas:`);

            surebet.mercadosLocked.forEach((mercado) => {
              console.log(
                `‚îÇ    ‚ú® ${mercado.mercado} - ${mercado.opcao} (For√ßa: ${mercado.odd})`
              );
            });

            console.log("‚îî" + "‚îÄ".repeat(60) + "‚îò");
            console.log(
              "üö® ALERTA M√çSTICO: A bola de cristal brilha intensamente!"
            );
            console.log("üí´ As energias convergem para uma poss√≠vel surebet!");

            // Enviar para usu√°rios VIP
            await this.enviarVisaoParaVIPs(surebet);
          }
        }
      } else {
        console.log(
          "üå´Ô∏è  A bola de cristal est√° nebulosa... Nenhuma vis√£o clara encontrada."
        );
        console.log(
          "üí≠ As energias dos mercados est√£o em harmonia por agora..."
        );
      }

      console.log(
        `\nüîÆ Aguardando 60 segundos para pr√≥xima consulta ao or√°culo...`
      );
      console.log("üí´ As estrelas se alinham para a pr√≥xima vis√£o...");
    } catch (error) {
      console.error("‚ö° INTERFER√äNCIA M√çSTICA DETECTADA:", error.message);
      console.log(
        "üå™Ô∏è  As energias est√£o inst√°veis... Tentando novamente em 60s..."
      );
    }
  }

  async enviarVisaoParaVIPs(surebet) {
    if (!this.whatsappClient || this.usuariosVIP.length === 0) {
      console.log("üì± WhatsApp n√£o conectado ou nenhum usu√°rio VIP dispon√≠vel");
      return;
    }

    const horarioDeteccao = new Date().toLocaleString("pt-BR");
    const dataJogo = new Date(surebet.data).toLocaleString("pt-BR");

    // Formatando a lista de mercados locked
    let mercadosTexto = "";
    surebet.mercadosLocked.forEach((mercado, index) => {
      mercadosTexto += `üéØ ${mercado.mercado} - ${mercado.opcao} (Odd: ${mercado.odd})`;
      if (index < surebet.mercadosLocked.length - 1) {
        mercadosTexto += "\n";
      }
    });

    const mensagem =
      `üîÆ‚ú® VIS√ÉO PROF√âTICA DETECTADA! ‚ú®üîÆ\n\n` +
      `‚öΩ Jogo: ${surebet.homeTeam} vs ${surebet.awayTeam}\n` +
      `üèüÔ∏è Torneio: ${surebet.tournament} (${surebet.country})\n` +
      `‚è∞ Data: ${dataJogo}\n` +
      `üïê Detectado em: ${horarioDeteccao}\n\n` +
      `üåü ENERGIAS LOCKED DETECTADAS:\n` +
      `${mercadosTexto}\n\n` +
      `üö® ALERTA M√çSTICO: As energias convergem para uma poss√≠vel surebet!\n` +
      `üí´ A bola de cristal brilha intensamente!`;

    // Enviar para todos os usu√°rios VIP
    for (const usuario of this.usuariosVIP) {
      try {
        await this.whatsappClient.sendText(usuario, mensagem);
        console.log(
          `üîÆ Vis√£o prof√©tica enviada para VIP ${usuario.substring(
            0,
            15
          )}... ‚úÖ`
        );
        // Delay entre envios
        await new Promise((resolve) => setTimeout(resolve, 500));
      } catch (error) {
        console.error(
          `‚ùå Erro ao enviar vis√£o para VIP ${usuario.substring(0, 15)}...:`,
          error.message
        );
      }
    }
  }

  estaAtivo() {
    return this.ativo;
  }

  getStatus() {
    return {
      ativo: this.ativo,
      consultas: this.contadorConsultas,
      visoesUnicas: this.visoesEncontradas.size,
      usuariosVIP: this.usuariosVIP.length,
    };
  }
}

module.exports = { OraculoService };
